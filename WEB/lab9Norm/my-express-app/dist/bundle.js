/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/app.js":
/*!**************************!*\
  !*** ./public/js/app.js ***!
  \**************************/
/***/ (() => {

eval("let currentPage = 1;\nlet currentSort = 'name';\nlet currentOrder = 'asc';\nlet currentSearch = '';\n\nfunction createPageStructure() {\n    const app = document.getElementById('app');\n    app.innerHTML = `\n        <h1>Управление меню кафе</h1>\n        \n        <div class=\"container\">\n            <form id=\"menuForm\">\n                <input type=\"hidden\" id=\"dishId\">\n                <input type=\"text\" id=\"name\" placeholder=\"Название блюда\" required>\n                <textarea id=\"description\" placeholder=\"Описание\"></textarea>\n                <input type=\"number\" id=\"price\" placeholder=\"Цена\" required>\n                <select id=\"category\">\n                    <option value=\"Салаты\">Салаты</option>\n                    <option value=\"Горячие блюда\">Горячие блюда</option>\n                    <option value=\"Десерты\">Десерты</option>\n                    <option value=\"Напитки\">Напитки</option>\n                </select>\n                <button type=\"submit\">Сохранить</button>\n            </form>\n\n            <div class=\"controls\">\n                <div class=\"search-box\">\n                    <input type=\"text\" id=\"searchInput\" placeholder=\"Поиск по названию...\">\n                </div>\n                <div class=\"sort-controls\">\n                    <select id=\"sortSelect\">\n                        <option value=\"name\">По названию</option>\n                        <option value=\"price\">По цене</option>\n                        <option value=\"category\">По категории</option>\n                    </select>\n                    <button id=\"sortOrderBtn\">↑</button>\n                </div>\n            </div>\n            \n            <table>\n                <thead>\n                    <tr>\n                        <th>Название</th>\n                        <th>Описание</th>\n                        <th>Цена</th>\n                        <th>Категория</th>\n                        <th>Действия</th>\n                    </tr>\n                </thead>\n                <tbody id=\"menuTableBody\">\n                </tbody>\n            </table>\n\n            <div class=\"pagination\">\n                <button id=\"prevPage\" disabled>←</button>\n                <span id=\"pageInfo\">Страница 1 из 1</span>\n                <button id=\"nextPage\" disabled>→</button>\n            </div>\n        </div>\n    `;\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    createPageStructure();\n    const form = document.getElementById('menuForm');\n    const searchInput = document.getElementById('searchInput');\n    const sortSelect = document.getElementById('sortSelect');\n    const sortOrderBtn = document.getElementById('sortOrderBtn');\n    const prevPageBtn = document.getElementById('prevPage');\n    const nextPageBtn = document.getElementById('nextPage');\n\n    // Обработчик поиска\n    searchInput.addEventListener('input', debounce(() => {\n        currentSearch = searchInput.value;\n        currentPage = 1;\n        updateMenuTable();\n    }, 300));\n\n    // Обработчик сортировки\n    sortSelect.addEventListener('change', () => {\n        currentSort = sortSelect.value;\n        updateMenuTable();\n    });\n\n    // Обработчик порядка сортировки\n    sortOrderBtn.addEventListener('click', () => {\n        currentOrder = currentOrder === 'asc' ? 'desc' : 'asc';\n        sortOrderBtn.textContent = currentOrder === 'asc' ? '↑' : '↓';\n        updateMenuTable();\n    });\n\n    // Обработчики пагинации\n    prevPageBtn.addEventListener('click', () => {\n        if (currentPage > 1) {\n            currentPage--;\n            updateMenuTable();\n        }\n    });\n\n    nextPageBtn.addEventListener('click', () => {\n        currentPage++;\n        updateMenuTable();\n    });\n\n    form.addEventListener('submit', async (e) => {\n        e.preventDefault();\n\n        const name = document.getElementById('name').value.trim();\n        const description = document.getElementById('description').value.trim();\n        const price = document.getElementById('price').value;\n        const category = document.getElementById('category').value;\n\n        if (!name || !price) {\n            alert('Название и цена обязательны для заполнения');\n            return;\n        }\n\n        const data = {\n            name,\n            description,\n            price: parseFloat(price),\n            category\n        };\n\n        try {\n            const existingResponse = await fetch(`/api/menu/${encodeURIComponent(name)}`);\n            if (existingResponse.ok) {\n                const response = await fetch(`/api/menu/${encodeURIComponent(name)}`, {\n                    method: 'PUT',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    const error = await response.json();\n                    throw new Error(error.error || 'Ошибка обновления');\n                }\n\n                const result = await response.json();\n                console.log('Блюдо обновлено:', result);\n            } else if (existingResponse.status === 404) {\n                const response = await fetch('/api/menu', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    const error = await response.json();\n                    throw new Error(error.error || 'Ошибка создания');\n                }\n\n                const result = await response.json();\n                console.log('Блюдо создано:', result);\n            } else {\n                throw new Error('Ошибка при проверке существования блюда');\n            }\n\n            form.reset();\n            await updateMenuTable();\n        } catch (error) {\n            console.error('Ошибка:', error);\n            alert(`Ошибка: ${error.message}`);\n        }\n    });\n});\n\n// Функция для предотвращения частых вызовов при вводе\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nasync function updateMenuTable() {\n    try {\n        const queryParams = new URLSearchParams({\n            page: currentPage,\n            limit: 5,\n            sort: currentSort,\n            order: currentOrder,\n            search: currentSearch\n        });\n\n        const response = await fetch(`/api/menu?${queryParams}`);\n        const data = await response.json();\n        \n        const tbody = document.getElementById('menuTableBody');\n        tbody.innerHTML = '';\n        \n        if (data.items && data.items.length > 0) {\n            data.items.forEach(item => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${item.name}</td>\n                    <td>${item.description}</td>\n                    <td>${item.price} руб.</td>\n                    <td>${item.category}</td>\n                    <td>\n                        <button onclick=\"editItem('${item.name.replace(/'/g, \"\\\\'\")}')\">Изменить</button>\n                        <button onclick=\"deleteItem('${item.name.replace(/'/g, \"\\\\'\")}')\">Удалить</button>\n                    </td>\n                `;\n                tbody.appendChild(row);\n            });\n        } else {\n            tbody.innerHTML = `\n                <tr>\n                    <td colspan=\"5\" style=\"text-align: center;\">Нет данных для отображения</td>\n                </tr>\n            `;\n        }\n\n        // Обновляем информацию о страницах\n        document.getElementById('pageInfo').textContent = `Страница ${data.page} из ${data.totalPages}`;\n        document.getElementById('prevPage').disabled = data.page <= 1;\n        document.getElementById('nextPage').disabled = data.page >= data.totalPages;\n    } catch (error) {\n        console.error('Ошибка при обновлении таблицы:', error);\n        const tbody = document.getElementById('menuTableBody');\n        tbody.innerHTML = `\n            <tr>\n                <td colspan=\"5\" style=\"text-align: center; color: red;\">Ошибка загрузки данных</td>\n            </tr>\n        `;\n    }\n}\n\nfunction editItem(name) {\n    fetch(`/api/menu/${encodeURIComponent(name)}`)\n        .then(res => res.json())\n        .then(item => {\n            document.getElementById('name').value = item.name;\n            document.getElementById('description').value = item.description;\n            document.getElementById('price').value = item.price;\n            document.getElementById('category').value = item.category;\n        });\n}\n\nfunction deleteItem(name) {\n    if (!name) {\n        console.error('Название блюда не определено');\n        return;\n    }\n    fetch(`/api/menu/${encodeURIComponent(name)}`, {\n        method: 'DELETE'\n    })\n    .then(response => {\n        if (response.ok) {\n            console.log(`Блюдо \"${name}\" удалено`);\n            updateMenuTable();\n        } else {\n            console.error('Ошибка удаления блюда');\n        }\n    })\n    .catch(err => console.error('Ошибка сети:', err));\n}\n\n// Инициализация таблицы при загрузке страницы\nupdateMenuTable();\n\n//# sourceURL=webpack://my-express-app/./public/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/js/app.js"]();
/******/ 	
/******/ })()
;