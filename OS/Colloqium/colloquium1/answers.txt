# Коллоквиум 1

**Информация о студенте:**
- ФИО: Лихолап Фёдор Владиславович
- Группа: 10
- Вариант: 2

## Ответы для четных вариантов

1. **Функции Win API для лабораторной работы №2**:
   - CreateProcess: Создание нового процесса.
   - OpenProcess: Открытие существующего процесса.
   - TerminateProcess: Завершение процесса.
   - WaitForSingleObject: Ожидание завершения процесса или семафора.
   - CloseHandle: Закрытие дескрипторов.
   - CreateSemaphore: Создание семафора для синхронизации.
   - OpenSemaphore: Открытие существующего семафора.
   - ReleaseSemaphore: Увеличение счетчика семафора.

2. **Определение процесса в Windows**:
   Процесс — это экземпляр выполняемой программы, который имеет собственное виртуальное адресное пространство, ресурсы (память, файлы) и один или несколько потоков выполнения.

3. **Критическая секция**:
   Критическая секция — это механизм синхронизации в Windows, используемый для защиты общего ресурса от одновременного доступа несколькими потоками в пределах одного процесса. Обеспечивает взаимоисключение (mutex).

4. **Семафор**:
   Семафор — это объект синхронизации, который поддерживает счетчик для управления доступом к общему ресурсу. Может использоваться для синхронизации как между потоками, так и между процессами, если создан с именем.

5. **Сравнение C++98 с использованием или без использования библиотеки Boost, или более новый стандарт с использованием или без использования библиотеки Qt**:
   - C++98: Ограниченные возможности, отсутствие умных указателей и современных контейнеров. Для лабораторных работ с WinAPI требует ручного управления ресурсами, что увеличивает риск ошибок.
   - C++98 с Boost: Boost предоставляет умные указатели, контейнеры и утилиты, упрощающие управление дескрипторами WinAPI, делая код безопаснее.
   - C++11 и новее: Включает умные указатели (std::unique_ptr, std::shared_ptr), что упрощает управление ресурсами без дополнительных библиотек. Подходит для лабораторных работ, требующих надежности.
   - C++11 с Qt: Qt предоставляет высокоуровневые классы (например, QProcess), но может быть избыточным для низкоуровневых задач с WinAPI, если цель — изучение API напрямую.

## Общие вопросы

1. **Полное определение объектно-ориентированного программирования (ООП)**:
   Объектно-ориентированное программирование — это парадигма, основанная на объектах, которые объединяют данные (атрибуты) и методы (поведение). Основные принципы: инкапсуляция (сокрытие данных), наследование (переиспользование кода), полиморфизм (различное поведение объектов одного интерфейса) и абстракция (упрощение сложных систем).

2. **"Магическое число 7" Миллера и не менее 7 примеров из области ИТ**:
   "Магическое число 7" Миллера гласит, что человек может удерживать в кратковременной памяти около 7 (±2) элементов. Это влияет на дизайн интерфейсов и систем. Примеры:
   - Ограничение количества пунктов в меню интерфейса до 5–9 для удобства восприятия.
   - Группировка цифр в телефонных номерах (например, +7-XXX-XXX-XX-XX).
   - Ограничение числа одновременно отображаемых вкладок в браузере.
   - Дизайн дашбордов с 5–7 ключевыми метриками.
   - Разделение кода на функции с не более чем 7 параметрами для читаемости.
   - Ограничение числа шагов в мастере установки программ.
   - Группировка данных в таблицах по 5–9 строк для быстрого анализа.

3. **Определение "энтропии программного обеспечения" и не менее 5 примеров мер, не связанных с энтропией**:
   Энтропия ПО — это увеличение сложности и беспорядка в коде со временем, затрудняющее поддержку. Меры, не связанные с энтропией:
   - Рефакторинг: Улучшение структуры кода без изменения функциональности.
   - Модульный дизайн: Разделение системы на независимые части.
   - Автоматизированное тестирование: Обеспечение стабильности через тесты.
   - Документирование кода: Упрощение понимания для разработчиков.
   - Применение принципа DRY (Don't Repeat Yourself): Избежание дублирования кода.

4. **5 характеристик сложной системы по Гради Боочу и для каждой не менее 2 поясняющих примеров**:
   - Иерархия:
     - Структура ОС: ядро, драйверы, приложения.
     - Веб-приложение: фронтенд, бэкенд, база данных.
   - Распределенность:
     - Клиент-серверные приложения с разделением логики.
     - Облачные сервисы с данными на разных серверах.
   - Самоадаптация:
     - Балансировщик нагрузки, распределяющий трафик.
     - Автоматическое масштабирование в облаке.
   - Эмерджентность:
     - Социальные сети: тренды из взаимодействий пользователей.
     - Нейросети: распознавание образов из простых узлов.
   - Недетерминизм:
     - Прогноз погоды: разные исходы от малых изменений.
     - Системы реального времени с внешними событиями.

5. **Закон иерархических компенсаций Седова и не менее 5 исторических примеров его применения в эволюции ИТ**:
   Закон Седова: Недостатки на одном уровне системы компенсируются преимуществами на другом. Примеры:
   - Переход от мэйнфреймов к ПК: меньшая мощность компенсировалась доступностью.
   - Монолиты → микросервисы: сложность управления компенсировалась масштабируемостью.
   - Процедурное программирование → ООП: сложность изучения компенсировалась лучшей организацией кода.
   - Waterfall → Agile: меньшая предсказуемость компенсировалась гибкостью.
   - Локальные серверы → облака: меньший контроль компенсировался доступностью ресурсов.
