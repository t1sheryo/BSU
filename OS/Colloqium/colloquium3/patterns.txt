# Поведенческие шаблоны проектирования

## Шаблон "Состояние" (State Pattern)

### Определение
Шаблон "Состояние" позволяет объекту изменять свое поведение при изменении внутреннего состояния, создавая впечатление, что объект меняет свой класс.

### Примеры (проблема — решение)
| Проблема | Решение |
|----------|---------|
| Управление состояниями двери (открыта/закрыта) с разным поведением методов open/close. | Класс `Door` с состояниями `OpenState` и `ClosedState`, где каждый определяет поведение методов. |
| Игровой персонаж с состояниями (бег, прыжок, атака), требующими разной логики. | Класс `Player` с состояниями `RunningState`, `JumpingState`, переключающими поведение. |
| Управление состояниями GUI (редактирование/просмотр). | В Qt использование `QStateMachine` для реализации состояний приложения. |

### Анализ
- **Инкапсуляция**: Поведение каждого состояния инкапсулировано в отдельном классе, что упрощает поддержку и расширение.
- **Разделяй и властвуй**: Логика состояний разделена на независимые классы, что уменьшает сложность основного класса.
- **Ортогональные стратегии**: Разные состояния можно комбинировать с разными контекстами, обеспечивая гибкость.
- **Многопоточность**: Переключение состояний требует синхронизации, чтобы избежать гонок данных при одновременном доступе. Например, использование мьютексов для защиты состояния.

## Шаблон "Посредник" (Mediator Pattern)

### Определение
Шаблон "Посредник" определяет объект, который инкапсулирует взаимодействие множества объектов, уменьшая их прямые связи и упрощая координацию.

### Примеры (проблема — решение)
| Проблема | Решение |
|----------|---------|
| Сложное взаимодействие между пользователями в чат-приложении. | Класс `ChatMediator` управляет обменом сообщениями между объектами `User`, избегая прямых связей. |
| Координация элементов GUI (кнопки, поля ввода). | Класс `DialogMediator` синхронизирует действия элементов интерфейса. |
| Управление сигналами и слотами в Qt. | Использование механизма сигналов и слотов Qt как посредника для связи объектов. |

### Анализ
- **Инкапсуляция**: Посредник скрывает детали взаимодействия, упрощая интерфейсы объектов.
- **Разделяй и властвуй**: Логика взаимодействия вынесена в отдельный класс, что снижает связность.
- **Ортогональные стратегии**: Разные типы посредников могут управлять разными взаимодействиями.
- **Многопоточность**: Требуется синхронизация для обработки событий в многопоточной среде, например, использование очередей событий или блокировок.

## Шаблон "Наблюдатель" (Observer Pattern)

### Определение
Шаблон "Наблюдатель" определяет зависимость "один ко многим", позволяя множеству объектов получать уведомления об изменениях состояния другого объекта.

### Примеры (проблема — решение)
| Проблема | Решение |
|----------|---------|
| Оповещение подписчиков о новых данных (например, погодные станции). | Класс `WeatherStation` уведомляет объекты `Display` об изменениях температуры. |
| Обновление интерфейса при изменении данных модели. | В Qt использование сигналов и слотов для связи модели и представления. |
| Рассылка котировок на бирже. | Класс `StockExchange` уведомляет объекты `Trader` об изменениях цен. |

### Анализ
- **Инкапсуляция**: Изменения состояния изолированы в субъекте, наблюдатели получают только необходимые данные.
- **Разделяй и властвуй**: Логика обновления вынесена в наблюдатели, упрощая субъект.
- **Ортогональные стратегии**: Разные наблюдатели могут обрабатывать уведомления по-разному.
- **Многопоточность**: Уведомления требуют синхронизации, чтобы избежать конфликтов при одновременных обновлениях.

## Дизайн программного обеспечения
Дизайн ПО — это процесс определения архитектуры, компонентов, интерфейсов и других характеристик системы для достижения целей, таких как масштабируемость, поддерживаемость и производительность.

### Влияние многопоточности
- **Конкорренция**: Шаблоны, такие как "Наблюдатель", требуют асинхронных уведомлений для избежания блокировок.
- **Синхронизация**: Использование мьютексов или семафоров для защиты общих ресурсов (например, состояния в State Pattern).
- **Безопасность потоков**: Необходимость проверки потокобезопасности библиотек, таких как Qt.
- **Производительность**: Многопоточность может замедлять выполнение из-за накладных расходов на синхронизацию.
- **Тестирование**: Требуются дополнительные тесты для проверки поведения в условиях гонок данных.
