# Документация к программе **"Image Processing Application"**

### Общее описание

Программа представляет собой графическое приложение для обработки изображений с использованием библиотек OpenCV, NumPy и Tkinter. Она позволяет пользователю загружать изображение и выполнять следующие операции:

1. Эквализацию гистограммы.
2. Линейное растяжение контраста.
3. Выделение краев (детектирование).

### Основные модули и библиотеки
1. **OpenCV (cv2):** Используется для обработки изображений.
2. **NumPy:** Выполняет математические операции над массивами.
3. **Tkinter:** Создает графический интерфейс пользователя (GUI).
4. **Pillow (PIL):** Преобразует изображения в формат, совместимый с Tkinter.

---

## Классы и функции

### Класс `ImageProcessingApp`
**Описание:** Основной класс приложения, содержащий интерфейс и методы обработки изображений.

#### Конструктор: `__init__(self, root)`
Инициализирует окно и элементы интерфейса:
- Кнопки для загрузки изображений и вызова операций.
- Метки (`Label`) для отображения изображения.
- Атрибуты:
  - `self.image`: Исходное изображение.
  - `self.processed_image`: Обработанное изображение.

---

### Методы

#### `load_image(self)`
**Описание:** Загружает изображение, выбранное пользователем через диалоговое окно.
- Использует `filedialog.askopenfilename()` для выбора файла.
- Загружает изображение с помощью `cv2.imread`.
- Вызывает `self.show_image()` для отображения загруженного изображения.

#### `show_image(self, img)`
**Описание:** Отображает изображение в окне.
- Преобразует изображение из формата BGR (OpenCV) в RGB (для Tkinter) с помощью `cv2.cvtColor`.
- Преобразует массив в формат PIL с использованием `Image.fromarray`.
- Создает объект `ImageTk.PhotoImage` для отображения в интерфейсе.

#### `histogram_equalization(self)`
**Описание:** Выполняет эквализацию гистограммы изображения.
- Преобразует изображение в цветовое пространство YUV (`cv2.COLOR_BGR2YUV`).
- Выполняет эквализацию яркости (Y-канала).
- Преобразует изображение обратно в BGR (`cv2.COLOR_YUV2BGR`).
- Отображает результат через `self.show_image()`.

#### `linear_contrast(self)`
**Описание:** Реализует линейное растяжение контраста.
- Вычисляет минимальное (`min_val`) и максимальное (`max_val`) значения пикселей изображения.
- Преобразует изображение по формуле:
  \[
  \text{new\_pixel} = \frac{(pixel - min\_val) \times 255}{max\_val - min\_val}
  \]
- Результат преобразуется к типу `uint8` для совместимости с OpenCV.
- Отображает результат через `self.show_image()`.

#### `edge_detection(self)`
**Описание:** Выполняет детектирование краев с использованием оператора Кэнни.
- Преобразует изображение в оттенки серого (`cv2.COLOR_BGR2GRAY`).
- Вычисляет границы с помощью `cv2.Canny`.
- Преобразует результат обратно в цветное изображение для отображения.
- Отображает результат через `self.show_image()`.

---

### Пример использования
1. Запустите программу:
   ```bash
   python main.py
   ```
2. Нажмите кнопку **Load Image** для загрузки изображения.
3. Выберите одну из операций:
   - **Histogram Equalization** для выравнивания гистограммы.
   - **Linear Contrast Stretching** для растяжения контраста.
   - **Edge Detection** для выделения краев.
4. Результат отобразится в главном окне программы.

---

### Особенности и ограничения

1. **Поддерживаемые форматы изображений:**
   - Все форматы, которые поддерживаются OpenCV (`.jpg`, `.png`, `.bmp`, и т.д.).

2. **Обработка ошибок:**
   - Если изображение не удается загрузить, выводится сообщение об ошибке в консоль.

3. **Ограничения:**
   - Программа работает только с 8-битными изображениями (стандартные RGB).

---

### Требования
1. Python версии 3.6 и выше.
2. Установленные зависимости:
   ```bash
   pip install opencv-python-headless numpy pillow
   ```

---

### Дополнения
Для улучшения программы можно добавить:
- Сохранение обработанного изображения.
- Возможность выбора параметров операций через интерфейс (например, пороги для `cv2.Canny`).